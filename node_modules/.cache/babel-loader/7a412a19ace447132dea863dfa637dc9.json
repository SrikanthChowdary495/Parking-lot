{"ast":null,"code":"var _jsxFileName = \"E:\\\\ReactJS\\\\parkingtest1\\\\src\\\\context\\\\parkinglotContext.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from \"react\";\nimport moment from 'moment';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const parkinglotContext = /*#__PURE__*/React.createContext({});\n\nconst ContextProvider = props => {\n  _s();\n\n  const [slotList, setSlotList] = useState([]);\n  const [carInfo, setCarInfo] = useState({});\n  const [totalslots, setTotalslots] = useState('');\n  const [parkinfo, setParkinfo] = React.useState({});\n  const [showReg, setShowReg] = React.useState(false);\n  const [open, setOpen] = React.useState(false);\n  const [message, setMessage] = useState('');\n\n  const changeHandler = e => {\n    let value = e.target.value === '' ? '' : parseInt(e.target.value, 10);\n    setTotalslots(value);\n  };\n\n  const generateSlots = tslots => {\n    let data = [];\n\n    for (let i = 1; tslots >= i; i++) {\n      data.push({\n        'slotNo': i,\n        'carNumber': '',\n        'startTime': ''\n      });\n    }\n\n    setSlotList(data);\n    setShowReg(true);\n  };\n\n  const handleParkinfo = e => {\n    parkinfo[e.target.name] = e.target.value.toUpperCase();\n    setParkinfo(parkinfo);\n  };\n\n  const allocateSlot = () => {\n    let isexist = [];\n    let availableSlots = slotList.filter((ele, i) => {\n      if (ele.carNumber == parkinfo.regNo) {\n        /* istanbul ignore next */\n        isexist.push(ele);\n      }\n\n      if (ele.carNumber == '') {\n        ele['index'] = i;\n        return ele;\n      }\n    });\n\n    if (isexist.length > 0) {\n      /* istanbul ignore next */\n      setOpen(true);\n      /* istanbul ignore next */\n\n      setMessage('This Registration number already exist. Please enter correct number');\n      /* istanbul ignore next */\n\n      return false;\n    }\n\n    if (availableSlots.length > 0) {\n      let ran = Math.floor(Math.random() * availableSlots.length) + 0;\n      slotList[availableSlots[ran].index].carNumber = parkinfo.regNo;\n      slotList[availableSlots[ran].index].startTime = parkinfo.parkTime;\n      setSlotList([...slotList]);\n    } else {\n      /* istanbul ignore next */\n      setOpen(true);\n      /* istanbul ignore next */\n\n      setMessage('Parking is full');\n    }\n  };\n\n  const gotoPaymentPage = (history, index, ele) => {\n    if (ele.carNumber) {\n      let endDate = moment(moment().format());\n      let startDate = moment(moment(slotList[index].startTime).format());\n      let spentTime = endDate.diff(startDate, 'hours', true).toFixed(2);\n      let resultMinutes = endDate.diff(startDate, 'minutes', true);\n      let charges = 0;\n\n      if (resultMinutes <= 120) {\n        /* istanbul ignore next */\n        charges = 10;\n      } else {\n        charges = (10 + (resultMinutes - 120) * (10 / 60)).toFixed(2);\n      }\n\n      setCarInfo({ ...slotList[index],\n        spentTime,\n        charges,\n        index\n      });\n      history('/degistraton');\n    } else {\n      /* istanbul ignore next */\n      alert('parking space not allocated');\n    }\n  };\n\n  const makePayment = (info, history) => {\n    const options = {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify({\n        'car-registration': info.carNumber,\n        'charge': info.charges\n      })\n    };\n    fetch('https://httpstat.us/200', options).then(resp => {\n      /* istanbul ignore next */\n      slotList[info.index].carNumber = '';\n      /* istanbul ignore next */\n\n      slotList[info.index].startTime = '';\n      /* istanbul ignore next */\n\n      setSlotList([...slotList]);\n      /* istanbul ignore next */\n\n      history('/');\n    }).catch(err => {\n      /* istanbul ignore next */\n      alert(err);\n    });\n  };\n\n  const closeTost = () => {\n    /* istanbul ignore next */\n    setOpen(false);\n  };\n\n  return /*#__PURE__*/_jsxDEV(parkinglotContext.Provider, {\n    value: {\n      slotList,\n      totalslots,\n      parkinfo,\n      carInfo,\n      showReg,\n      open,\n      message,\n      changeHandler,\n      generateSlots,\n      handleParkinfo,\n      allocateSlot,\n      gotoPaymentPage,\n      makePayment,\n      closeTost\n    },\n    children: props.children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 138,\n    columnNumber: 5\n  }, this);\n};\n\n_s(ContextProvider, \"qA5/zsH+DcpkwrFaaIXAq2Qmmuk=\");\n\n_c = ContextProvider;\nexport default ContextProvider;\n\nvar _c;\n\n$RefreshReg$(_c, \"ContextProvider\");","map":{"version":3,"names":["React","useState","moment","parkinglotContext","createContext","ContextProvider","props","slotList","setSlotList","carInfo","setCarInfo","totalslots","setTotalslots","parkinfo","setParkinfo","showReg","setShowReg","open","setOpen","message","setMessage","changeHandler","e","value","target","parseInt","generateSlots","tslots","data","i","push","handleParkinfo","name","toUpperCase","allocateSlot","isexist","availableSlots","filter","ele","carNumber","regNo","length","ran","Math","floor","random","index","startTime","parkTime","gotoPaymentPage","history","endDate","format","startDate","spentTime","diff","toFixed","resultMinutes","charges","alert","makePayment","info","options","method","headers","body","JSON","stringify","fetch","then","resp","catch","err","closeTost","children"],"sources":["E:/ReactJS/parkingtest1/src/context/parkinglotContext.tsx"],"sourcesContent":["import React, { useState} from \"react\";\r\nimport  moment from 'moment'\r\n\r\n\r\ninterface IState {\r\n  totalslots:any;\r\n  slotList:any;\r\n  parkinfo:any;\r\n  carInfo:any;\r\n  showReg:any;\r\n  open:any;\r\n  message:any;\r\n  changeHandler:Function;\r\n  generateSlots:Function;\r\n  handleParkinfo:Function;\r\n  allocateSlot:Function;\r\n  gotoPaymentPage:Function;\r\n  makePayment:Function;\r\n  closeTost:Function;\r\n}\r\n\r\nexport const parkinglotContext = React.createContext({} as IState);\r\nconst ContextProvider = (props: any) => {\r\n  const [slotList, setSlotList] = useState<any>([]);\r\n  const [carInfo, setCarInfo] = useState<any>({})\r\n  const [totalslots, setTotalslots] = useState('');\r\n  const [parkinfo, setParkinfo]=React.useState<any>({})\r\n  const [showReg, setShowReg]=React.useState(false)\r\n  const [open, setOpen]=React.useState(false)\r\n  const [message, setMessage] = useState('');\r\n\r\n  const\tchangeHandler = (e:any) => {\r\n    let value:any = (e.target.value === '') ? '': parseInt(e.target.value, 10);\r\n    setTotalslots(value)\r\n}\r\n\r\nconst generateSlots=(tslots:any)=>{\r\n    let data:any=[]\r\n    for(let i:any=1; tslots >= i; i++){\r\n      data.push({\r\n      'slotNo': i,\r\n      'carNumber':'',\r\n      'startTime':''\r\n      })\r\n    }\r\n setSlotList(data)\r\n setShowReg(true)\r\n  }\r\n\r\n  const handleParkinfo=(e:any)=>{\r\n    parkinfo[e.target.name]=e.target.value.toUpperCase()\r\n    setParkinfo(parkinfo)\r\n  }\r\n\r\n  const allocateSlot=()=>{\r\n    let isexist:any=[]\r\n    let availableSlots:any=slotList.filter((ele:any,i:any)=>\r\n    {\r\n      if(ele.carNumber==parkinfo.regNo){\r\n            /* istanbul ignore next */\r\n        isexist.push(ele)\r\n      }\r\n      if(ele.carNumber==''){\r\n      ele['index']=i\r\n      return ele\r\n    }})\r\n    if(isexist.length>0){\r\n        /* istanbul ignore next */\r\n      setOpen(true)\r\n        /* istanbul ignore next */\r\n      setMessage('This Registration number already exist. Please enter correct number')\r\n        /* istanbul ignore next */\r\n      return false\r\n    }\r\n    if(availableSlots.length>0){\r\n    let ran:any=Math.floor(Math.random() * availableSlots.length) + 0\r\n    slotList[availableSlots[ran].index].carNumber=parkinfo.regNo\r\n    slotList[availableSlots[ran].index].startTime=parkinfo.parkTime\r\n    setSlotList([...slotList])\r\n    }\r\n    else{\r\n      /* istanbul ignore next */\r\n      setOpen(true)\r\n      /* istanbul ignore next */\r\n      setMessage('Parking is full')\r\n    }\r\n  }\r\n\r\n  const gotoPaymentPage =(history:any,index:any,ele:any)=>{\r\n   if(ele.carNumber){\r\n    let endDate:any=moment(moment().format())\r\n    let startDate:any=moment(moment(slotList[index].startTime).format())\r\n  let  spentTime = (endDate.diff(startDate, 'hours', true)).toFixed(2);\r\n  let  resultMinutes = endDate.diff(startDate, 'minutes', true);\r\n  let charges:any=0\r\n  if(resultMinutes<=120){\r\n     /* istanbul ignore next */\r\n    charges=10\r\n  }\r\n  else{\r\n    charges=(10+(resultMinutes-120)*(10/60)).toFixed(2)\r\n  }\r\n    setCarInfo({...slotList[index],spentTime,charges,index})\r\n    history('/degistraton')\r\n   }\r\n   else{\r\n        /* istanbul ignore next */\r\n       alert('parking space not allocated')\r\n   }\r\n  }\r\n\r\n  const makePayment=(info:any,history:any)=>{\r\n    const options = {\r\n        method: \"POST\",\r\n        headers: { \"Content-Type\": \"application/json\" },\r\n        body: JSON.stringify({ 'car-registration': info.carNumber,'charge': info.charges})\r\n      };\r\n     fetch('https://httpstat.us/200',options).then((resp:any) => {\r\n           /* istanbul ignore next */\r\n        slotList[info.index].carNumber=''\r\n            /* istanbul ignore next */\r\n        slotList[info.index].startTime=''\r\n            /* istanbul ignore next */\r\n        setSlotList([...slotList])\r\n            /* istanbul ignore next */\r\n        history('/')\r\n      }).catch((err:any) => {\r\n         /* istanbul ignore next */\r\n                alert(err)\r\n          });\r\n  }\r\n  const  closeTost=()=>{\r\n     /* istanbul ignore next */\r\n    setOpen(false)\r\n  }\r\n\r\n  return (\r\n    <parkinglotContext.Provider value={{\r\n        slotList,\r\n        totalslots,\r\n        parkinfo,\r\n        carInfo,\r\n        showReg,\r\n        open,\r\n        message,\r\n        changeHandler,\r\n        generateSlots,\r\n        handleParkinfo,\r\n        allocateSlot,\r\n        gotoPaymentPage,\r\n        makePayment,\r\n        closeTost,\r\n      }}>\r\n      {props.children}\r\n    </parkinglotContext.Provider>\r\n  );\r\n};\r\n\r\nexport default ContextProvider;\r\n\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}